name: Nightly Build and Deploy

on:
  schedule:
    - cron: '0 */3 * * *' # Run every 3 hours
  workflow_dispatch: # Manual trigger

env:
  TARGET_REPO: lizhi123le/BPB-Worker-Panel

jobs:
  nightly-build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository with full history
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Check for nightly branch based on target repo's latest commit
      - name: Check for Nightly Branch
        id: check_nightly_branch
        shell: bash
        run: |
          set -euo pipefail

          # Get the latest commit ID from the target repository's main branch
          LATEST_COMMIT_ID=$(curl -fsSL "https://api.github.com/repos/${{ env.TARGET_REPO }}/commits/main" | jq -r '.sha')
          if [ -z "$LATEST_COMMIT_ID" ] || [ "$LATEST_COMMIT_ID" = "null" ]; then
            echo "Error: Failed to get latest commit ID from ${{ env.TARGET_REPO }}"
            exit 1
          fi

          NIGHTLY_BRANCH="night-${LATEST_COMMIT_ID}"
          echo "Latest commit ID from ${{ env.TARGET_REPO }}: $LATEST_COMMIT_ID"
          echo "NIGHTLY_BRANCH=$NIGHTLY_BRANCH" >> "$GITHUB_OUTPUT"
          echo "LATEST_COMMIT_ID=$LATEST_COMMIT_ID" >> "$GITHUB_OUTPUT"

          # Check if the nightly branch already exists in the current repository
          if git ls-remote --heads origin "$NIGHTLY_BRANCH" | grep -q "$NIGHTLY_BRANCH"; then
            echo "Nightly branch $NIGHTLY_BRANCH already exists."
            echo "has_update=false" >> "$GITHUB_ENV"
          else
            echo "Nightly branch $NIGHTLY_BRANCH does not exist."
            echo "has_update=true" >> "$GITHUB_ENV"
          fi

      # Step 3: Clone target repository's source code
      - name: Clone Target Repository
        if: github.event_name == 'workflow_dispatch' || env.has_update == 'true'
        id: download_source
        run: |
          set -euo pipefail
          if ! git clone --depth 1 "https://github.com/${{ env.TARGET_REPO }}.git" repos; then
            echo "Error: Failed to clone ${{ env.TARGET_REPO }}"
            exit 1
          fi
          echo "SOURCE_DIR=repos" >> "$GITHUB_ENV"
          echo "Cloned source code to repos/"

      # Step 4: Install dependencies for target repository
      - name: Install Target Repository Dependencies
        if: github.event_name == 'workflow_dispatch' || env.has_update == 'true'
        working-directory: ${{ env.SOURCE_DIR }}
        run: |
          set -euo pipefail
          if [ -f package-lock.json ] || [ -f package.json ]; then
            echo "Installing dependencies with npm ci..."
            npm ci --prefer-offline --no-audit --progress=false || {
              echo "npm ci failed, falling back to npm install..."
              npm install
            }
          else
            echo "No package.json in target repository, skipping dependency installation."
          fi

      # Step 5: Install dependencies for current repository
      - name: Install Current Repository Dependencies
        if: github.event_name == 'workflow_dispatch' || env.has_update == 'true'
        working-directory: ${{ github.workspace }}
        run: |
          set -euo pipefail
          if [ -f package-lock.json ] || [ -f package.json ]; then
            echo "Installing dependencies with npm ci..."
            npm ci --prefer-offline --no-audit --progress=false || {
              echo "npm ci failed, falling back to npm install..."
              npm install
            }
          else
            echo "No package.json in current repository, skipping dependency installation."
          fi

      # Step 6: Build and deploy (dry-run)
      - name: Build Worker Script (Dry Run)
        if: github.event_name == 'workflow_dispatch' || env.has_update == 'true'
        run: |
          set -euo pipefail
          SOURCE_FILE="${{ env.SOURCE_DIR }}/src/worker.js"
          if [ ! -f "$SOURCE_FILE" ]; then
            echo "Error: Source worker file not found at $SOURCE_FILE"
            exit 1
          fi
          npx --yes wrangler deploy "$SOURCE_FILE" \
            --name bpb-worker-panel \
            --compatibility-flag nodejs_compat \
            --compatibility-date 2024-10-26 \
            --dry-run \
            --outdir=dist

      # Step 7: Obfuscate worker script
      - name: Obfuscate Worker Script
        id: obfuscate_js_code
        if: github.event_name == 'workflow_dispatch' || env.has_update == 'true'
        run: |
          set -euo pipefail
          if [ ! -f dist/worker.js ]; then
            echo "dist/worker.js not found. Attempting to use source file as fallback."
            if [ -f "${{ env.SOURCE_DIR }}/src/worker.js" ]; then
              mkdir -p dist
              cp "${{ env.SOURCE_DIR }}/src/worker.js" dist/worker.js
            else
              echo "Error: No worker.js available to obfuscate."
              exit 1
            fi
          fi
          if [ ! -f obfuscator.json ]; then
            echo "Error: obfuscator.json not found in repository root."
            exit 1
          fi

          # Generate random seed (64-bit unsigned)
          RANDOM_NUMBER=$(od -An -N8 -tu8 < /dev/urandom | tr -d ' ')
          echo "RANDOM_NUMBER=$RANDOM_NUMBER" >> "$GITHUB_ENV"
          echo "RANDOM_NUMBER=$RANDOM_NUMBER" >> "$GITHUB_OUTPUT"

          npx --yes javascript-obfuscator dist/worker.js \
            --output dist/worker.obfuscated.js \
            --seed "$RANDOM_NUMBER" \
            --config obfuscator.json

      # Step 8: Replace _worker.js with obfuscated version
      - name: Replace _worker.js
        if: github.event_name == 'workflow_dispatch' || env.has_update == 'true'
        run: |
          set -euo pipefail
          if [ ! -f dist/worker.obfuscated.js ]; then
            echo "Error: dist/worker.obfuscated.js not found"
            exit 1
          fi
          cp dist/worker.obfuscated.js _worker.js
          echo "_worker.js replaced with obfuscated version."

      # Step 9: Commit and Push _worker.js to Nightly Branch
      - name: Commit and Push _worker.js to Nightly Branch
        if: github.event_name == 'workflow_dispatch' || env.has_update == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NIGHTLY_BRANCH: ${{ steps.check_nightly_branch.outputs.NIGHTLY_BRANCH }}
          RANDOM_NUMBER: ${{ steps.obfuscate_js_code.outputs.RANDOM_NUMBER }}
          LATEST_COMMIT_ID: ${{ steps.check_nightly_branch.outputs.LATEST_COMMIT_ID }}
        run: |
          set -euo pipefail

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Ensure origin remote is set
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git"

          # Delete existing tag if it exists to avoid refspec ambiguity
          echo "Checking for existing tag: ${{ env.NIGHTLY_BRANCH }}"
          git ls-remote --tags origin "${{ env.NIGHTLY_BRANCH }}" | grep -q "${{ env.NIGHTLY_BRANCH }}" && {
            echo "Deleting existing tag: ${{ env.NIGHTLY_BRANCH }}"
            git push origin --delete "refs/tags/${{ env.NIGHTLY_BRANCH }}" || echo "Tag deletion failed, proceeding."
          } || echo "No existing tag found, proceeding."

          # Stage _worker.js changes
          git add _worker.js || true

          # Commit changes if any exist
          if git diff --cached --quiet; then
            echo "No staged changes to commit."
          else
            git commit -m "Update _worker.js with obfuscated version: ${RANDOM_NUMBER:-unknown} (commit ${{ env.LATEST_COMMIT_ID }})"
          fi

          # Create or switch to NIGHTLY_BRANCH
          if git show-ref --verify --quiet "refs/heads/${NIGHTLY_BRANCH}"; then
            git checkout "${NIGHTLY_BRANCH}"
          else
            git checkout -b "${NIGHTLY_BRANCH}"
          fi

          # Stage and commit _worker.js again in case of changes after checkout
          git add _worker.js || true
          if git diff --cached --quiet; then
            echo "No additional changes to commit after checkout."
          else
            git commit -m "Update _worker.js in ${{ env.NIGHTLY_BRANCH }}: ${RANDOM_NUMBER:-unknown} (commit ${{ env.LATEST_COMMIT_ID }})"
          fi

          # Fetch remote branch
          git fetch origin "${NIGHTLY_BRANCH}" || true

          # Push to remote branch
          if git show-ref --verify --quiet "refs/remotes/origin/${NIGHTLY_BRANCH}"; then
            if git merge-base --is-ancestor "origin/${NIGHTLY_BRANCH}" HEAD; then
              echo "Local branch is ahead of origin, pushing..."
              git push origin "HEAD:refs/heads/${NIGHTLY_BRANCH}"
            else
              echo "Branches have diverged. Attempting to rebase onto origin/${NIGHTLY_BRANCH}..."
              if git rebase "origin/${NIGHTLY_BRANCH}"; then
                git push origin "HEAD:refs/heads/${NIGHTLY_BRANCH}" --force-with-lease
              else
                echo "Error: Rebase failed. Please resolve conflicts manually."
                exit 1
              fi
            fi
          else
            echo "Remote branch does not exist, pushing new branch..."
            git push -u origin "HEAD:refs/heads/${NIGHTLY_BRANCH}"
          fi
        shell: bash

      # Step 10: Compress _worker.js to _worker.zip
      - name: Compress _worker.js to ZIP
        if: github.event_name == 'workflow_dispatch' || env.has_update == 'true'
        run: |
          set -euo pipefail
          if [ ! -f _worker.js ]; then
            echo "Error: _worker.js not found"
            exit 1
          fi
          zip -j _worker.zip _worker.js
          echo "_worker.js compressed to _worker.zip"

      # Step 11: Check for existing pre-release
      - name: Check for Existing Pre-release
        if: github.event_name == 'workflow_dispatch' || env.has_update == 'true'
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NIGHTLY_BRANCH: ${{ steps.check_nightly_branch.outputs.NIGHTLY_BRANCH }}
        run: |
          set -euo pipefail
          RELEASE_ID=$(curl -s -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases | \
            jq -r --arg tag "${{ env.NIGHTLY_BRANCH }}" '.[] | select(.tag_name == $tag) | .id' || echo "none")
          echo "release_id=$RELEASE_ID" >> "$GITHUB_OUTPUT"
          echo "Existing release ID: $RELEASE_ID"

      # Step 12: Delete existing pre-release if it exists
      - name: Delete Existing Pre-release
        if: github.event_name == 'workflow_dispatch' || (env.has_update == 'true' && steps.check_release.outputs.release_id != 'none')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NIGHTLY_BRANCH: ${{ steps.check_nightly_branch.outputs.NIGHTLY_BRANCH }}
        run: |
          set -euo pipefail
          echo "Deleting existing pre-release with ID: ${{ steps.check_release.outputs.release_id }}"
          curl -s -X DELETE \
            -H "Authorization: Bearer ${{ env.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.check_release.outputs.release_id }}

      # Step 13: Create pre-release and upload assets
      - name: Create Pre-release and Upload Assets
        if: github.event_name == 'workflow_dispatch' || env.has_update == 'true'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NIGHTLY_BRANCH: ${{ steps.check_nightly_branch.outputs.NIGHTLY_BRANCH }}
          RANDOM_NUMBER: ${{ steps.obfuscate_js_code.outputs.RANDOM_NUMBER }}
          LATEST_COMMIT_ID: ${{ steps.check_nightly_branch.outputs.LATEST_COMMIT_ID }}
          TARGET_REPO: ${{ env.TARGET_REPO }}
        with:
          name: "nightly-${{ env.LATEST_COMMIT_ID }}"
          files: |
            _worker.js
            _worker.zip
          tag_name: "${{ env.NIGHTLY_BRANCH }}"
          prerelease: true
          body: |
            This pre-release includes the latest obfuscated _worker.js.
            Generated from commit ID: [${{ env.LATEST_COMMIT_ID }}](https://github.com/${{ env.TARGET_REPO }}/commit/${{ env.LATEST_COMMIT_ID }})
            Obfuscation seed: ${{ env.RANDOM_NUMBER }}
